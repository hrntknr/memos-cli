#!/bin/bash -e
set -o pipefail

function _get_config() {
  if [ ! -f $HOME/.config/memos/config.json ]; then
    echo "Please login first."
    exit 1
  fi

  cat $HOME/.config/memos/config.json
}

function _finder() {
  if type peco >/dev/null 2>&1; then
    peco --on-cancel error
  elif type fzf >/dev/null 2>&1; then
    fzf
  else
    echo "Please install fzf or peco."
    exit 1
  fi
}

function _usage() {
  cat <<EOF
Usage: $(basename "$0") <subcommand> [<options>]
Options:
  -h, --help                         Print usage
  -v, --verbose                      Print verbose messages
  -t <tag>, --tag <tag>              Tag filter
  -s <content>, --search <content>   Content filter
Subcommands:
  login           Login to the server
  list            List memos
  list_archived   List archived memos
  archive         Archive a memo
  archive <id>    Archive a memo with id
  unarchive       Unarchive a memo
  unarchive <id>  Unarchive a memo with id
  delete          Delete a memo
  delete <id>     Delete a memo with id
  show            Show a memo
  show <id>       Show a memo with id
  edit            Edit a memo (pipe or redirect supported)
  edit <id>       Edit a memo with id (pipe or redirect supported)
  new             Create a new memo (pipe or redirect supported)
EOF
}

function _url_param() {
  for tag in "${tags[@]}"; do
    echo -n "&tag=$(echo -n "$tag" | jq -sRr @uri)"
  done
  for content in "${contents[@]}"; do
    echo -n "&content=$(echo -n "$content" | jq -sRr @uri)"
  done
}

function login() {
  read -p "Server: " server
  read -p "Token: " token

  me=$(curl -sf $server/api/v1/user/me -H "Authorization: Bearer $token")
  if [ $? -ne 0 ]; then
    echo "Login failed."
    exit 1
  fi
  echo Logged in as $(echo $me | jq -r .nickname)

  mkdir -p $HOME/.config/memos
  jq -n --arg server "$server" --arg token "$token" \
    '{"server": $server, "token": $token}' >$HOME/.config/memos/config.json
}

function list() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ $# -eq 0 ]; then
    exit 1
  fi
  chain=$1

  list=$(curl -sf $server/api/v1/memo?$(_url_param) -H "Authorization: Bearer $token")
  id=$(echo $list | jq -r '.[] | select(.rowStatus == "NORMAL") | [.id, .content] | @tsv' | _finder | cut -f1)
  $chain $id
}

function list_archived() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ $# -eq 0 ]; then
    exit 1
  fi
  chain=$1

  list=$(curl -sf $server/api/v1/memo?$(_url_param) -H "Authorization: Bearer $token")
  id=$(echo $list | jq -r '.[] | select(.rowStatus == "ARCHIVED") | [.id, .content] | @tsv' | _finder | cut -f1)
  $chain $id
}

function archive() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ $# -eq 0 ]; then
    list archive
    exit 0
  fi
  id=$1

  result=$(curl -sf $server/api/v1/memo/$id -H "Authorization: Bearer $token" -XPATCH -d '{"rowStatus": "ARCHIVED"}')
  echo "Archived memo $(echo $result | jq -r .id)"
}

function unarchive() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ $# -eq 0 ]; then
    list_archived unarchive
    exit 0
  fi
  id=$1

  result=$(curl -sf $server/api/v1/memo/$id -H "Authorization: Bearer $token" -XPATCH -d '{"rowStatus": "NORMAL"}')
  echo "Unarchived memo $(echo $result | jq -r .id)"
}

function delete() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ $# -eq 0 ]; then
    list delete
    exit 0
  fi
  id=$1

  curl -sf $server/api/v1/memo/$id -H "Authorization: Bearer $token" -XDELETE
  echo "Deleted memo $id"
}

function show() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ $# -eq 0 ]; then
    list show
    exit 0
  fi
  id=$1

  content=$(curl -sf $server/api/v1/memo/$id -H "Authorization: Bearer $token" | jq .content -r)
  echo "$content"
}

function edit() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ $# -eq 0 ]; then
    list edit
    exit 0
  fi
  id=$1

  if [ -t 0 ]; then
    target=$(mktemp)
    content=$(curl -sf $server/api/v1/memo/$id -H "Authorization: Bearer $token" | jq .content -r)
    echo "$content" >$target
    ${EDITOR:-vi} $target
    if diff -q $target <(echo "$content") >/dev/null; then
      echo "No changes."
      exit 1
    fi
  elif [ -p /dev/stdin ]; then
    target=/dev/stdin
  elif [ -f /dev/stdin ]; then
    target=/dev/stdin
  else
    echo "Invalid stdin."
    exit 1
  fi

  body=$(jq -n --arg content "$(cat $target)" '{"content": $content}')
  result=$(curl -sf $server/api/v1/memo/$id -H "Authorization: Bearer $token" -XPATCH -d "$body")
  echo "Edited memo $(echo $result | jq -r .id)"

  if [ -t 0 ]; then
    rm $target
  fi
}

function new() {
  server=$(_get_config | jq -r .server)
  token=$(_get_config | jq -r .token)

  if [ -t 0 ]; then
    target=$(mktemp)
    ${EDITOR:-vi} $target
    if [ ! -s $target ]; then
      echo "Empty memo."
      exit 1
    fi
  elif [ -p /dev/stdin ]; then
    target=/dev/stdin
  elif [ -f /dev/stdin ]; then
    target=/dev/stdin
  else
    echo "Invalid stdin."
    exit 1
  fi

  body=$(jq -n --arg content "$(cat $target)" '{"content": $content}')
  result=$(curl -sf $server/api/v1/memo -H "Authorization: Bearer $token" -XPOST -d "$body")
  echo "Created memo $(echo $result | jq -r .id)"

  if [ -t 0 ]; then
    rm $target
  fi
}

verbose=0
tags=()
contents=()
commands=()

function parse_args() {
  OPTIND=1
  while getopts ":ht:s:v-:" OPT "$@"; do
    if [ "$OPT" = "-" ]; then
      OPT=${OPTARG%%=*}
      if [[ $OPT == $OPTARG ]]; then
        OPTARG=${!OPTIND}
      else
        OPTARG=${OPTARG#*=}
      fi
    fi
    case $OPT in
    tag | search)
      OPTIND=$((OPTIND + 1))
      ;;&
    h | help)
      _usage
      exit 0
      ;;
    t | tag)
      tags+=("$OPTARG")

      ;;
    s | search)
      contents+=("$OPTARG")
      ;;
    v | verbose)
      verbose=1
      ;;
    *)
      _usage
      exit 1
      ;;
    esac
  done
}

function main() {
  while [ $# -gt 0 ]; do
    if [[ $1 == -* ]]; then
      parse_args $@
      shift $((OPTIND - 1))
    else
      commands+=("$1")
      shift
    fi
  done

  if [ $verbose -eq 1 ]; then
    echo "tags: ${tags[@]}"
    echo "contents: ${contents[@]}"
    echo "commands: ${commands[@]}"
    echo "url_param: $(_url_param)"
    set -x
  fi

  case ${commands[0]} in
  login)
    login
    ;;
  list)
    list show
    ;;
  list_archived)
    list_archived show
    ;;
  archive)
    archive ${commands[@]:1}
    ;;
  unarchive)
    unarchive ${commands[@]:1}
    ;;
  delete)
    delete ${commands[@]:1}
    ;;
  show)
    show ${commands[@]:1}
    ;;
  edit)
    edit ${commands[@]:1}
    ;;
  new)
    new
    ;;
  *)
    _usage
    exit 1
    ;;
  esac
}

main $@
